{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "API RESTful de Usuários - CodeIgniter 3",
		"description": "Collection completa para testar a API RESTful de usuários desenvolvida com CodeIgniter 3 e Docker.\n\n## Funcionalidades:\n- CRUD completo de usuários\n- Validação de dados\n- Paginação e filtros\n- Health check\n- Tratamento de erros\n\n## Base URL:\nhttp://localhost:8080\n\n## Autor:\nAPI desenvolvida com CodeIgniter 3 + Docker + MySQL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Response has database status\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.database).to.have.property(\"status\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"health"
							]
						},
						"description": "Endpoint para verificar o status da API e conexão com o banco de dados."
					},
					"response": []
				}
			],
			"description": "Endpoints para verificar o status da API"
		},
		{
			"name": "Usuários - CRUD",
			"item": [
				{
					"name": "Listar Todos os Usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Response has pagination info\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination).to.have.property(\"total\");",
									"    pm.expect(jsonData.pagination).to.have.property(\"count\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Lista todos os usuários com paginação padrão (10 registros)."
					},
					"response": []
				},
				{
					"name": "Listar Usuários com Paginação",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response respects limit parameter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.be.at.most(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users?limit=5&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "5",
									"description": "Número máximo de registros"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Número de registros para pular"
								}
							]
						},
						"description": "Lista usuários com paginação customizada."
					},
					"response": []
				},
				{
					"name": "Listar Usuários com Filtros",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users?status=active&search=joão&order_by=name&order_dir=ASC",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "status",
									"value": "active",
									"description": "Filtrar por status (active/inactive)"
								},
								{
									"key": "search",
									"value": "joão",
									"description": "Buscar por nome ou email"
								},
								{
									"key": "order_by",
									"value": "name",
									"description": "Campo para ordenação"
								},
								{
									"key": "order_dir",
									"value": "ASC",
									"description": "Direção da ordenação (ASC/DESC)"
								}
							]
						},
						"description": "Lista usuários com filtros aplicados."
					},
					"response": []
				},
				{
					"name": "Obter Usuário por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has user data\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"success\");",
									"        pm.expect(jsonData.data).to.have.property(\"id\");",
									"        pm.expect(jsonData.data).to.have.property(\"name\");",
									"        pm.expect(jsonData.data).to.have.property(\"email\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Obtém um usuário específico pelo ID."
					},
					"response": []
				},
				{
					"name": "Criar Usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has status success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Response has created user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"id\");",
									"    pm.expect(jsonData.data).to.have.property(\"name\");",
									"    pm.expect(jsonData.data).to.have.property(\"email\");",
									"    ",
									"    // Salvar ID do usuário criado para outros testes",
									"    pm.environment.set(\"created_user_id\", jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"João Silva\",\n    \"email\": \"joao.silva@email.com\",\n    \"password\": \"123456\",\n    \"phone\": \"(11) 99999-9999\",\n    \"status\": \"active\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Cria um novo usuário."
					},
					"response": []
				},
				{
					"name": "Criar Usuário - Dados Mínimos",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Maria Santos\",\n    \"email\": \"maria.santos@email.com\",\n    \"password\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Cria um usuário com apenas os campos obrigatórios."
					},
					"response": []
				},
				{
					"name": "Atualizar Usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has status success\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"success\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"João Santos Silva\",\n    \"email\": \"joao.santos@email.com\",\n    \"phone\": \"(11) 88888-8888\",\n    \"status\": \"active\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Atualiza os dados de um usuário existente."
					},
					"response": []
				},
				{
					"name": "Atualizar Usuário com Senha",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"João Santos Silva\",\n    \"email\": \"joao.santos@email.com\",\n    \"password\": \"nova_senha_123\",\n    \"phone\": \"(11) 77777-7777\",\n    \"status\": \"active\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Atualiza um usuário incluindo a senha."
					},
					"response": []
				},
				{
					"name": "Deletar Usuário (Soft Delete)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has status success\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.status).to.eql(\"success\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Deleta um usuário (soft delete - apenas desativa)."
					},
					"response": []
				},
				{
					"name": "Deletar Usuário (Hard Delete)",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}?hard=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "hard",
									"value": "true",
									"description": "Deletar permanentemente"
								}
							]
						},
						"description": "Deleta um usuário permanentemente (hard delete)."
					},
					"response": []
				}
			],
			"description": "Endpoints para operações CRUD de usuários"
		},
		{
			"name": "Testes de Validação",
			"item": [
				{
					"name": "Criar Usuário - Email Inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"error\");",
									"    pm.expect(jsonData.errors).to.have.property(\"email\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Teste Usuário\",\n    \"email\": \"email_invalido\",\n    \"password\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Testa validação de email inválido."
					},
					"response": []
				},
				{
					"name": "Criar Usuário - Senha Muito Curta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has password validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"error\");",
									"    pm.expect(jsonData.errors).to.have.property(\"password\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Teste Usuário\",\n    \"email\": \"teste@email.com\",\n    \"password\": \"123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Testa validação de senha muito curta."
					},
					"response": []
				},
				{
					"name": "Criar Usuário - Campos Obrigatórios Vazios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation errors for required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"error\");",
									"    pm.expect(jsonData.errors).to.have.property(\"name\");",
									"    pm.expect(jsonData.errors).to.have.property(\"email\");",
									"    pm.expect(jsonData.errors).to.have.property(\"password\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"email\": \"\",\n    \"password\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Testa validação de campos obrigatórios vazios."
					},
					"response": []
				},
				{
					"name": "Criar Usuário - Email Duplicado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Response indicates email already exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"error\");",
									"    pm.expect(jsonData.message).to.include(\"já está em uso\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Usuário Duplicado\",\n    \"email\": \"joao@email.com\",\n    \"password\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Testa validação de email duplicado (usar email que já existe)."
					},
					"response": []
				},
				{
					"name": "Obter Usuário - ID Inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response indicates invalid ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"error\");",
									"    pm.expect(jsonData.message).to.include(\"inválido\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/abc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"abc"
							]
						},
						"description": "Testa validação de ID inválido."
					},
					"response": []
				},
				{
					"name": "Obter Usuário - Não Encontrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response indicates user not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"error\");",
									"    pm.expect(jsonData.message).to.include(\"não encontrado\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"99999"
							]
						},
						"description": "Testa busca por usuário inexistente."
					},
					"response": []
				}
			],
			"description": "Testes de validação e tratamento de erros"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "1",
			"type": "string"
		}
	]
}